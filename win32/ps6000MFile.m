function [methodinfo,structs,enuminfo,ThunkLibName]=ps6000MFile
%PS6000MFILE Create structures to define interfaces found in 'ps6000Api'.

%This function was generated by loadlibrary.m parser version  on Wed Nov 19 12:52:37 2014
%perl options:'ps6000Api.i -outfile=ps6000MFile.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% PICO_STATUS _stdcall ps6000OpenUnit ( int16_t * handle , char * serial ); 
fcns.name{fcnNum}='ps6000OpenUnit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000OpenUnitAsync ( int16_t * status , char * serial ); 
fcns.name{fcnNum}='ps6000OpenUnitAsync'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000OpenUnitProgress ( int16_t * handle , int16_t * progressPercent , int16_t * complete ); 
fcns.name{fcnNum}='ps6000OpenUnitProgress'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetUnitInfo ( int16_t handle , char * string , int16_t stringLength , int16_t * requiredSize , PICO_INFO info ); 
fcns.name{fcnNum}='ps6000GetUnitInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'cstring', 'int16', 'int16Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000FlashLed ( int16_t handle , int16_t start ); 
fcns.name{fcnNum}='ps6000FlashLed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000CloseUnit ( int16_t handle ); 
fcns.name{fcnNum}='ps6000CloseUnit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000MemorySegments ( int16_t handle , uint32_t nSegments , uint32_t * nMaxSamples ); 
fcns.name{fcnNum}='ps6000MemorySegments'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetChannel ( int16_t handle , PS6000_CHANNEL channel , int16_t enabled , PS6000_COUPLING type , PS6000_RANGE range , float analogueOffset , PS6000_BANDWIDTH_LIMITER bandwidth ); 
fcns.name{fcnNum}='ps6000SetChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Channel', 'int16', 'enPS6000Coupling', 'enPS6000Range', 'single', 'enPS6000BandwidthLimiter'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetTimebase ( int16_t handle , uint32_t timebase , uint32_t noSamples , int32_t * timeIntervalNanoseconds , int16_t oversample , uint32_t * maxSamples , uint32_t segmentIndex ); 
fcns.name{fcnNum}='ps6000GetTimebase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'int32Ptr', 'int16', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetTimebase2 ( int16_t handle , uint32_t timebase , uint32_t noSamples , float * timeIntervalNanoseconds , int16_t oversample , uint32_t * maxSamples , uint32_t segmentIndex ); 
fcns.name{fcnNum}='ps6000GetTimebase2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'singlePtr', 'int16', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSigGenArbitrary ( int16_t handle , int32_t offsetVoltage , uint32_t pkToPk , uint32_t startDeltaPhase , uint32_t stopDeltaPhase , uint32_t deltaPhaseIncrement , uint32_t dwellCount , int16_t * arbitraryWaveform , int32_t arbitraryWaveformSize , PS6000_SWEEP_TYPE sweepType , PS6000_EXTRA_OPERATIONS operation , PS6000_INDEX_MODE indexMode , uint32_t shots , uint32_t sweeps , PS6000_SIGGEN_TRIG_TYPE triggerType , PS6000_SIGGEN_TRIG_SOURCE triggerSource , int16_t extInThreshold ); 
fcns.name{fcnNum}='ps6000SetSigGenArbitrary'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'int16Ptr', 'int32', 'enPS6000SweepType', 'enPS6000ExtraOperations', 'enPS6000IndexMode', 'uint32', 'uint32', 'enPS6000SigGenTrigType', 'enPS6000SigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSigGenBuiltIn ( int16_t handle , int32_t offsetVoltage , uint32_t pkToPk , int16_t waveType , float startFrequency , float stopFrequency , float increment , float dwellTime , PS6000_SWEEP_TYPE sweepType , PS6000_EXTRA_OPERATIONS operation , uint32_t shots , uint32_t sweeps , PS6000_SIGGEN_TRIG_TYPE triggerType , PS6000_SIGGEN_TRIG_SOURCE triggerSource , int16_t extInThreshold ); 
fcns.name{fcnNum}='ps6000SetSigGenBuiltIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int32', 'uint32', 'int16', 'single', 'single', 'single', 'single', 'enPS6000SweepType', 'enPS6000ExtraOperations', 'uint32', 'uint32', 'enPS6000SigGenTrigType', 'enPS6000SigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSigGenBuiltInV2 ( int16_t handle , int32_t offsetVoltage , uint32_t pkToPk , int16_t waveType , double startFrequency , double stopFrequency , double increment , double dwellTime , PS6000_SWEEP_TYPE sweepType , PS6000_EXTRA_OPERATIONS operation , uint32_t shots , uint32_t sweeps , PS6000_SIGGEN_TRIG_TYPE triggerType , PS6000_SIGGEN_TRIG_SOURCE triggerSource , int16_t extInThreshold ); 
fcns.name{fcnNum}='ps6000SetSigGenBuiltInV2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int32', 'uint32', 'int16', 'double', 'double', 'double', 'double', 'enPS6000SweepType', 'enPS6000ExtraOperations', 'uint32', 'uint32', 'enPS6000SigGenTrigType', 'enPS6000SigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSigGenPropertiesArbitrary ( int16_t handle , int32_t offsetVoltage , uint32_t pkToPk , uint32_t startDeltaPhase , uint32_t stopDeltaPhase , uint32_t deltaPhaseIncrement , uint32_t dwellCount , PS6000_SWEEP_TYPE sweepType , uint32_t shots , uint32_t sweeps , PS6000_SIGGEN_TRIG_TYPE triggerType , PS6000_SIGGEN_TRIG_SOURCE triggerSource , int16_t extInThreshold ); 
fcns.name{fcnNum}='ps6000SetSigGenPropertiesArbitrary'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'enPS6000SweepType', 'uint32', 'uint32', 'enPS6000SigGenTrigType', 'enPS6000SigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSigGenPropertiesBuiltIn ( int16_t handle , int32_t offsetVoltage , uint32_t pkToPk , double startFrequency , double stopFrequency , double increment , double dwellTime , PS6000_SWEEP_TYPE sweepType , uint32_t shots , uint32_t sweeps , PS6000_SIGGEN_TRIG_TYPE triggerType , PS6000_SIGGEN_TRIG_SOURCE triggerSource , int16_t extInThreshold ); 
fcns.name{fcnNum}='ps6000SetSigGenPropertiesBuiltIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int32', 'uint32', 'double', 'double', 'double', 'double', 'enPS6000SweepType', 'uint32', 'uint32', 'enPS6000SigGenTrigType', 'enPS6000SigGenTrigSource', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SigGenFrequencyToPhase ( int16_t handle , double frequency , PS6000_INDEX_MODE indexMode , uint32_t bufferLength , uint32_t * phase ); 
fcns.name{fcnNum}='ps6000SigGenFrequencyToPhase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'double', 'enPS6000IndexMode', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SigGenArbitraryMinMaxValues ( int16_t handle , int16_t * minArbitraryWaveformValue , int16_t * maxArbitraryWaveformValue , uint32_t * minArbitraryWaveformSize , uint32_t * maxArbitraryWaveformSize ); 
fcns.name{fcnNum}='ps6000SigGenArbitraryMinMaxValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr', 'int16Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SigGenSoftwareControl ( int16_t handle , int16_t state ); 
fcns.name{fcnNum}='ps6000SigGenSoftwareControl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetSimpleTrigger ( int16_t handle , int16_t enable , PS6000_CHANNEL source , int16_t threshold , PS6000_THRESHOLD_DIRECTION direction , uint32_t delay , int16_t autoTrigger_ms ); 
fcns.name{fcnNum}='ps6000SetSimpleTrigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16', 'enPS6000Channel', 'int16', 'enPS6000ThresholdDirection', 'uint32', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetEts ( int16_t handle , PS6000_ETS_MODE mode , int16_t etsCycles , int16_t etsInterleave , int32_t * sampleTimePicoseconds ); 
fcns.name{fcnNum}='ps6000SetEts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000EtsMode', 'int16', 'int16', 'int32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetTriggerChannelProperties ( int16_t handle , PS6000_TRIGGER_CHANNEL_PROPERTIES * channelProperties , int16_t nChannelProperties , int16_t auxOutputEnable , int32_t autoTriggerMilliseconds ); 
fcns.name{fcnNum}='ps6000SetTriggerChannelProperties'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPS6000TriggerChannelPropertiesPtr', 'int16', 'int16', 'int32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetTriggerChannelConditions ( int16_t handle , PS6000_TRIGGER_CONDITIONS * conditions , int16_t nConditions ); 
fcns.name{fcnNum}='ps6000SetTriggerChannelConditions'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPS6000TriggerConditionsPtr', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetTriggerChannelDirections ( int16_t handle , PS6000_THRESHOLD_DIRECTION channelA , PS6000_THRESHOLD_DIRECTION channelB , PS6000_THRESHOLD_DIRECTION channelC , PS6000_THRESHOLD_DIRECTION channelD , PS6000_THRESHOLD_DIRECTION ext , PS6000_THRESHOLD_DIRECTION aux ); 
fcns.name{fcnNum}='ps6000SetTriggerChannelDirections'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000ThresholdDirection', 'enPS6000ThresholdDirection', 'enPS6000ThresholdDirection', 'enPS6000ThresholdDirection', 'enPS6000ThresholdDirection', 'enPS6000ThresholdDirection'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetTriggerDelay ( int16_t handle , uint32_t delay ); 
fcns.name{fcnNum}='ps6000SetTriggerDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetPulseWidthQualifier ( int16_t handle , PS6000_PWQ_CONDITIONS * conditions , int16_t nConditions , PS6000_THRESHOLD_DIRECTION direction , uint32_t lower , uint32_t upper , PS6000_PULSE_WIDTH_TYPE type ); 
fcns.name{fcnNum}='ps6000SetPulseWidthQualifier'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'tPS6000PwqConditionsPtr', 'int16', 'enPS6000ThresholdDirection', 'uint32', 'uint32', 'enPS6000PulseWidthType'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000IsTriggerOrPulseWidthQualifierEnabled ( int16_t handle , int16_t * triggerEnabled , int16_t * pulseWidthQualifierEnabled ); 
fcns.name{fcnNum}='ps6000IsTriggerOrPulseWidthQualifierEnabled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetTriggerTimeOffset ( int16_t handle , uint32_t * timeUpper , uint32_t * timeLower , uint32_t * timeUnits , uint32_t segmentIndex ); 
fcns.name{fcnNum}='ps6000GetTriggerTimeOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetTriggerTimeOffset64 ( int16_t handle , int64_t * time , uint32_t * timeUnits , uint32_t segmentIndex ); 
fcns.name{fcnNum}='ps6000GetTriggerTimeOffset64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesTriggerTimeOffsetBulk ( int16_t handle , uint32_t * timesUpper , uint32_t * timesLower , uint32_t * timeUnits , uint32_t fromSegmentIndex , uint32_t toSegmentIndex ); 
fcns.name{fcnNum}='ps6000GetValuesTriggerTimeOffsetBulk'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesTriggerTimeOffsetBulk64 ( int16_t handle , int64_t * times , uint32_t * timeUnits , uint32_t fromSegmentIndex , uint32_t toSegmentIndex ); 
fcns.name{fcnNum}='ps6000GetValuesTriggerTimeOffsetBulk64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'uint32Ptr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetDataBuffers ( int16_t handle , PS6000_CHANNEL channel , int16_t * bufferMax , int16_t * bufferMin , uint32_t bufferLth , PS6000_RATIO_MODE downSampleRatioMode ); 
fcns.name{fcnNum}='ps6000SetDataBuffers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Channel', 'int16Ptr', 'int16Ptr', 'uint32', 'enPS6000RatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetDataBuffer ( int16_t handle , PS6000_CHANNEL channel , int16_t * buffer , uint32_t bufferLth , PS6000_RATIO_MODE downSampleRatioMode ); 
fcns.name{fcnNum}='ps6000SetDataBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Channel', 'int16Ptr', 'uint32', 'enPS6000RatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetDataBufferBulk ( int16_t handle , PS6000_CHANNEL channel , int16_t * buffer , uint32_t bufferLth , uint32_t waveform , PS6000_RATIO_MODE downSampleRatioMode ); 
fcns.name{fcnNum}='ps6000SetDataBufferBulk'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Channel', 'int16Ptr', 'uint32', 'uint32', 'enPS6000RatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetDataBuffersBulk ( int16_t handle , PS6000_CHANNEL channel , int16_t * bufferMax , int16_t * bufferMin , uint32_t bufferLth , uint32_t waveform , PS6000_RATIO_MODE downSampleRatioMode ); 
fcns.name{fcnNum}='ps6000SetDataBuffersBulk'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Channel', 'int16Ptr', 'int16Ptr', 'uint32', 'uint32', 'enPS6000RatioMode'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetEtsTimeBuffer ( int16_t handle , int64_t * buffer , uint32_t bufferLth ); 
fcns.name{fcnNum}='ps6000SetEtsTimeBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int64Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetEtsTimeBuffers ( int16_t handle , uint32_t * timeUpper , uint32_t * timeLower , uint32_t bufferLth ); 
fcns.name{fcnNum}='ps6000SetEtsTimeBuffers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr', 'uint32Ptr', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000RunBlock ( int16_t handle , uint32_t noOfPreTriggerSamples , uint32_t noOfPostTriggerSamples , uint32_t timebase , int16_t oversample , int32_t * timeIndisposedMs , uint32_t segmentIndex , void * lpReady , void * pParameter ); 
fcns.name{fcnNum}='ps6000RunBlock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'uint32', 'int16', 'int32Ptr', 'uint32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000IsReady ( int16_t handle , int16_t * ready ); 
fcns.name{fcnNum}='ps6000IsReady'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000RunStreaming ( int16_t handle , uint32_t * sampleInterval , PS6000_TIME_UNITS sampleIntervalTimeUnits , uint32_t maxPreTriggerSamples , uint32_t maxPostPreTriggerSamples , int16_t autoStop , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t overviewBufferSize ); 
fcns.name{fcnNum}='ps6000RunStreaming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr', 'enPS6000TimeUnits', 'uint32', 'uint32', 'int16', 'uint32', 'enPS6000RatioMode', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetStreamingLatestValues ( int16_t handle , void * lpPs6000Ready , void * pParameter ); 
fcns.name{fcnNum}='ps6000GetStreamingLatestValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000NoOfStreamingValues ( int16_t handle , uint32_t * noOfValues ); 
fcns.name{fcnNum}='ps6000NoOfStreamingValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetMaxDownSampleRatio ( int16_t handle , uint32_t noOfUnaggreatedSamples , uint32_t * maxDownSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t segmentIndex ); 
fcns.name{fcnNum}='ps6000GetMaxDownSampleRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr', 'enPS6000RatioMode', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValues ( int16_t handle , uint32_t startIndex , uint32_t * noOfSamples , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t segmentIndex , int16_t * overflow ); 
fcns.name{fcnNum}='ps6000GetValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr', 'uint32', 'enPS6000RatioMode', 'uint32', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesBulk ( int16_t handle , uint32_t * noOfSamples , uint32_t fromSegmentIndex , uint32_t toSegmentIndex , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , int16_t * overflow ); 
fcns.name{fcnNum}='ps6000GetValuesBulk'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr', 'uint32', 'uint32', 'uint32', 'enPS6000RatioMode', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesAsync ( int16_t handle , uint32_t startIndex , uint32_t noOfSamples , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t segmentIndex , void * lpDataReady , void * pParameter ); 
fcns.name{fcnNum}='ps6000GetValuesAsync'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32', 'uint32', 'enPS6000RatioMode', 'uint32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesOverlapped ( int16_t handle , uint32_t startIndex , uint32_t * noOfSamples , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t segmentIndex , int16_t * overflow ); 
fcns.name{fcnNum}='ps6000GetValuesOverlapped'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr', 'uint32', 'enPS6000RatioMode', 'uint32', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesOverlappedBulk ( int16_t handle , uint32_t startIndex , uint32_t * noOfSamples , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t fromSegmentIndex , uint32_t toSegmentIndex , int16_t * overflow ); 
fcns.name{fcnNum}='ps6000GetValuesOverlappedBulk'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr', 'uint32', 'enPS6000RatioMode', 'uint32', 'uint32', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetValuesBulkAsyc ( int16_t handle , uint32_t startIndex , uint32_t * noOfSamples , uint32_t downSampleRatio , PS6000_RATIO_MODE downSampleRatioMode , uint32_t fromSegmentIndex , uint32_t toSegmentIndex , int16_t * overflow ); 
fcns.name{fcnNum}='ps6000GetValuesBulkAsyc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32', 'uint32Ptr', 'uint32', 'enPS6000RatioMode', 'uint32', 'uint32', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetNoOfCaptures ( int16_t handle , uint32_t * nCaptures ); 
fcns.name{fcnNum}='ps6000GetNoOfCaptures'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetNoOfProcessedCaptures ( int16_t handle , uint32_t * nProcessedCaptures ); 
fcns.name{fcnNum}='ps6000GetNoOfProcessedCaptures'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000Stop ( int16_t handle ); 
fcns.name{fcnNum}='ps6000Stop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetNoOfCaptures ( int16_t handle , uint32_t nCaptures ); 
fcns.name{fcnNum}='ps6000SetNoOfCaptures'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetWaveformLimiter ( int16_t handle , uint32_t nWaveformsPerSecond ); 
fcns.name{fcnNum}='ps6000SetWaveformLimiter'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'uint32'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000EnumerateUnits ( int16_t * count , char * serials , int16_t * serialLth ); 
fcns.name{fcnNum}='ps6000EnumerateUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16Ptr', 'cstring', 'int16Ptr'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000SetExternalClock ( int16_t handle , PS6000_EXTERNAL_FREQUENCY frequency , int16_t threshold ); 
fcns.name{fcnNum}='ps6000SetExternalClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000ExternalFrequency', 'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000PingUnit ( int16_t handle ); 
fcns.name{fcnNum}='ps6000PingUnit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16'};fcnNum=fcnNum+1;
% PICO_STATUS _stdcall ps6000GetAnalogueOffset ( int16_t handle , PS6000_RANGE range , PS6000_COUPLING coupling , float * maximumVoltage , float * minimumVoltage ); 
fcns.name{fcnNum}='ps6000GetAnalogueOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'int16', 'enPS6000Range', 'enPS6000Coupling', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
structs.tPS6000TriggerConditions.packing=1;
structs.tPS6000TriggerConditions.members=struct('channelA', 'enPS6000TriggerState', 'channelB', 'enPS6000TriggerState', 'channelC', 'enPS6000TriggerState', 'channelD', 'enPS6000TriggerState', 'external', 'enPS6000TriggerState', 'aux', 'enPS6000TriggerState', 'pulseWidthQualifier', 'enPS6000TriggerState');
structs.tPS6000PwqConditions.packing=1;
structs.tPS6000PwqConditions.members=struct('channelA', 'enPS6000TriggerState', 'channelB', 'enPS6000TriggerState', 'channelC', 'enPS6000TriggerState', 'channelD', 'enPS6000TriggerState', 'external', 'enPS6000TriggerState', 'aux', 'enPS6000TriggerState');
structs.tPS6000TriggerChannelProperties.packing=1;
structs.tPS6000TriggerChannelProperties.members=struct('thresholdUpper', 'int16', 'hysteresisUpper', 'uint16', 'thresholdLower', 'int16', 'hysteresisLower', 'uint16', 'channel', 'enPS6000Channel', 'thresholdMode', 'enPS6000ThresholdMode');
enuminfo.enPS6000TimeUnits=struct('PS6000_FS',0,'PS6000_PS',1,'PS6000_NS',2,'PS6000_US',3,'PS6000_MS',4,'PS6000_S',5,'PS6000_MAX_TIME_UNITS',6);
enuminfo.enPS6000ThresholdMode=struct('PS6000_LEVEL',0,'PS6000_WINDOW',1);
enuminfo.enPS6000PulseWidthType=struct('PS6000_PW_TYPE_NONE',0,'PS6000_PW_TYPE_LESS_THAN',1,'PS6000_PW_TYPE_GREATER_THAN',2,'PS6000_PW_TYPE_IN_RANGE',3,'PS6000_PW_TYPE_OUT_OF_RANGE',4);
enuminfo.enPS6000ChannelBufferIndex=struct('PS6000_CHANNEL_A_MAX',0,'PS6000_CHANNEL_A_MIN',1,'PS6000_CHANNEL_B_MAX',2,'PS6000_CHANNEL_B_MIN',3,'PS6000_CHANNEL_C_MAX',4,'PS6000_CHANNEL_C_MIN',5,'PS6000_CHANNEL_D_MAX',6,'PS6000_CHANNEL_D_MIN',7,'PS6000_MAX_CHANNEL_BUFFERS',8);
enuminfo.enPS6000SigGenTrigSource=struct('PS6000_SIGGEN_NONE',0,'PS6000_SIGGEN_SCOPE_TRIG',1,'PS6000_SIGGEN_AUX_IN',2,'PS6000_SIGGEN_EXT_IN',3,'PS6000_SIGGEN_SOFT_TRIG',4,'PS6000_SIGGEN_TRIGGER_RAW',5);
enuminfo.enPS6000WaveType=struct('PS6000_SINE',0,'PS6000_SQUARE',1,'PS6000_TRIANGLE',2,'PS6000_RAMP_UP',3,'PS6000_RAMP_DOWN',4,'PS6000_SINC',5,'PS6000_GAUSSIAN',6,'PS6000_HALF_SINE',7,'PS6000_DC_VOLTAGE',8,'PS6000_MAX_WAVE_TYPES',9);
enuminfo.enPS6000RatioMode=struct('PS6000_RATIO_MODE_NONE',0,'PS6000_RATIO_MODE_AGGREGATE',1,'PS6000_RATIO_MODE_AVERAGE',2,'PS6000_RATIO_MODE_DECIMATE',4,'PS6000_RATIO_MODE_DISTRIBUTION',8);
enuminfo.enPS6000SigGenTrigType=struct('PS6000_SIGGEN_RISING',0,'PS6000_SIGGEN_FALLING',1,'PS6000_SIGGEN_GATE_HIGH',2,'PS6000_SIGGEN_GATE_LOW',3);
enuminfo.enPS6000ExternalFrequency=struct('PS6000_FREQUENCY_OFF',0,'PS6000_FREQUENCY_5MHZ',1,'PS6000_FREQUENCY_10MHZ',2,'PS6000_FREQUENCY_20MHZ',3,'PS6000_FREQUENCY_25MHZ',4,'PS6000_MAX_FREQUENCIES',5);
enuminfo.enPS6000EtsMode=struct('PS6000_ETS_OFF',0,'PS6000_ETS_FAST',1,'PS6000_ETS_SLOW',2,'PS6000_ETS_MODES_MAX',3);
enuminfo.enPS6000SweepType=struct('PS6000_UP',0,'PS6000_DOWN',1,'PS6000_UPDOWN',2,'PS6000_DOWNUP',3,'PS6000_MAX_SWEEP_TYPES',4);
enuminfo.enPS6000BandwidthLimiter=struct('PS6000_BW_FULL',0,'PS6000_BW_20MHZ',1,'PS6000_BW_25MHZ',2);
enuminfo.enPS6000Channel=struct('PS6000_CHANNEL_A',0,'PS6000_CHANNEL_B',1,'PS6000_CHANNEL_C',2,'PS6000_CHANNEL_D',3,'PS6000_EXTERNAL',4,'PS6000_MAX_CHANNELS',4,'PS6000_TRIGGER_AUX',5,'PS6000_MAX_TRIGGER_SOURCES',6);
enuminfo.enPS6000IndexMode=struct('PS6000_SINGLE',0,'PS6000_DUAL',1,'PS6000_QUAD',2,'PS6000_MAX_INDEX_MODES',3);
enuminfo.enPS6000ThresholdDirection=struct('PS6000_ABOVE',0,'PS6000_BELOW',1,'PS6000_RISING',2,'PS6000_FALLING',3,'PS6000_RISING_OR_FALLING',4,'PS6000_ABOVE_LOWER',5,'PS6000_BELOW_LOWER',6,'PS6000_RISING_LOWER',7,'PS6000_FALLING_LOWER',8,'PS6000_INSIDE',0,'PS6000_OUTSIDE',1,'PS6000_ENTER',2,'PS6000_EXIT',3,'PS6000_ENTER_OR_EXIT',4,'PS6000_POSITIVE_RUNT',9,'PS6000_NEGATIVE_RUNT',10,'PS6000_NONE',2);
enuminfo.enPS6000ExtraOperations=struct('PS6000_ES_OFF',0,'PS6000_WHITENOISE',1,'PS6000_PRBS',2);
enuminfo.enPS6000Coupling=struct('PS6000_AC',0,'PS6000_DC_1M',1,'PS6000_DC_50R',2);
enuminfo.enPS6000TriggerState=struct('PS6000_CONDITION_DONT_CARE',0,'PS6000_CONDITION_TRUE',1,'PS6000_CONDITION_FALSE',2,'PS6000_CONDITION_MAX',3);
enuminfo.enPS6000Range=struct('PS6000_10MV',0,'PS6000_20MV',1,'PS6000_50MV',2,'PS6000_100MV',3,'PS6000_200MV',4,'PS6000_500MV',5,'PS6000_1V',6,'PS6000_2V',7,'PS6000_5V',8,'PS6000_10V',9,'PS6000_20V',10,'PS6000_50V',11,'PS6000_MAX_RANGES',12);
methodinfo=fcns;